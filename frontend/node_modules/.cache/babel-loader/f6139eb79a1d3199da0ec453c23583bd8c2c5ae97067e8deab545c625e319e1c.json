{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst PersonFormLogic = ({\n  setMessage\n}) => {\n  _s();\n  // State for storing form inputs\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    middlename: \"\",\n    lastname: \"\",\n    idNumber: \"\",\n    department: \"\",\n    bankAccount: \"\"\n  });\n  const formatInput = value => {\n    // Convert to uppercase\n    value = value.toUpperCase();\n\n    // Remove any non-numeric or comma/period characters, except the first period\n    value = value.replace(/[^0-9.,A-Z]/g, \"\");\n\n    // Ensure only one decimal point (or comma) is allowed\n    value = value.replace(/(?!^)\\./g, \"\");\n    value = value.replace(/(?!^),/g, \"\");\n\n    // Split integer and decimal parts\n    const [integer, decimal] = value.split(\".\");\n\n    // Format integer part with comma separators\n    const formattedInteger = integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n    // Join integer and decimal parts back\n    return decimal !== undefined ? `${formattedInteger}.${decimal}` : formattedInteger;\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: formatInput(value)\n    });\n  };\n\n  // Handle form submission and send data to the backend API\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(process.env.REACT_APP_WORKERS, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        // setMessage(response.message);\n        setMessage(\"Person added successfully!\");\n      } else {\n        // setMessage(error.message);\n        setMessage(\"Failed to add Person. Please try again.\");\n      }\n    } catch (error) {\n      setMessage(\"Error: Failed to connect to the server.\");\n    }\n  };\n  return {\n    formData,\n    handleChange,\n    handleSubmit\n  };\n};\n_s(PersonFormLogic, \"s060r4AQjLIQZlMUO9Xdi8pFIa8=\");\n_c = PersonFormLogic;\nexport default PersonFormLogic;\nvar _c;\n$RefreshReg$(_c, \"PersonFormLogic\");","map":{"version":3,"names":["useState","PersonFormLogic","setMessage","_s","formData","setFormData","firstname","middlename","lastname","idNumber","department","bankAccount","formatInput","value","toUpperCase","replace","integer","decimal","split","formattedInteger","undefined","handleChange","e","name","target","handleSubmit","preventDefault","response","fetch","process","env","REACT_APP_WORKERS","method","headers","body","JSON","stringify","ok","error","_c","$RefreshReg$"],"sources":["/media/morpheus1213/rll/projects/daerp-laravel/frontend/src/pages/person/PersonFormLogic.jsx"],"sourcesContent":["import { useState } from \"react\";\nconst PersonFormLogic = ({ setMessage }) => {\n  // State for storing form inputs\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    middlename: \"\",\n    lastname: \"\",\n    idNumber: \"\",\n    department: \"\",\n    bankAccount: \"\"\n  });\n\n  const formatInput = (value) => {\n    // Convert to uppercase\n    value = value.toUpperCase();\n\n    // Remove any non-numeric or comma/period characters, except the first period\n    value = value.replace(/[^0-9.,A-Z]/g, \"\");\n\n    // Ensure only one decimal point (or comma) is allowed\n    value = value.replace(/(?!^)\\./g, \"\");\n    value = value.replace(/(?!^),/g, \"\");\n\n    // Split integer and decimal parts\n    const [integer, decimal] = value.split(\".\");\n\n    // Format integer part with comma separators\n    const formattedInteger = integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n    // Join integer and decimal parts back\n    return decimal !== undefined\n      ? `${formattedInteger}.${decimal}`\n      : formattedInteger;\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: formatInput(value)\n    });\n  };\n\n  // Handle form submission and send data to the backend API\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch(process.env.REACT_APP_WORKERS, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.ok) {\n        // setMessage(response.message);\n        setMessage(\"Person added successfully!\");\n      } else {\n        // setMessage(error.message);\n        setMessage(\"Failed to add Person. Please try again.\");\n      }\n    } catch (error) {\n      setMessage(\"Error: Failed to connect to the server.\");\n    }\n  };\n\n  return {\n    formData,\n    handleChange,\n    handleSubmit\n  };\n};\n\nexport default PersonFormLogic;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC1C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC;IACvCM,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC7B;IACAA,KAAK,GAAGA,KAAK,CAACC,WAAW,CAAC,CAAC;;IAE3B;IACAD,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;;IAEzC;IACAF,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IACrCF,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;;IAEpC;IACA,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;;IAE3C;IACA,MAAMC,gBAAgB,GAAGH,OAAO,CAACD,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;;IAEtE;IACA,OAAOE,OAAO,KAAKG,SAAS,GACxB,GAAGD,gBAAgB,IAAIF,OAAO,EAAE,GAChCE,gBAAgB;EACtB,CAAC;;EAED;EACA,MAAME,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEV;IAAM,CAAC,GAAGS,CAAC,CAACE,MAAM;IAChCnB,WAAW,CAAC;MACV,GAAGD,QAAQ;MACX,CAACmB,IAAI,GAAGX,WAAW,CAACC,KAAK;IAC3B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMY,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChC,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAIuB,QAAQ,CAACU,EAAE,EAAE;QACf;QACAnC,UAAU,CAAC,4BAA4B,CAAC;MAC1C,CAAC,MAAM;QACL;QACAA,UAAU,CAAC,yCAAyC,CAAC;MACvD;IACF,CAAC,CAAC,OAAOoC,KAAK,EAAE;MACdpC,UAAU,CAAC,yCAAyC,CAAC;IACvD;EACF,CAAC;EAED,OAAO;IACLE,QAAQ;IACRiB,YAAY;IACZI;EACF,CAAC;AACH,CAAC;AAACtB,EAAA,CAzEIF,eAAe;AAAAsC,EAAA,GAAftC,eAAe;AA2ErB,eAAeA,eAAe;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}