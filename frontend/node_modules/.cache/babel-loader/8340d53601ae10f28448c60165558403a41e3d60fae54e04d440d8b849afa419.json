{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst PersonFormLogic = ({\n  setMessage\n}) => {\n  _s();\n  // State for storing form inputs\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    middlename: \"\",\n    lastname: \"\",\n    idNumber: \"\",\n    department: \"\",\n    bankAccount: \"\"\n  });\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  // Handle form submission and send data to the backend API\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(PAYROLL_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        setMessage(\"Person added successfully!\");\n      } else {\n        setMessage(\"Failed to add Person. Please try again.\");\n      }\n    } catch (error) {\n      setMessage(\"Error: Failed to connect to the server.\");\n    }\n  };\n  return {\n    formData,\n    handleChange,\n    handleSubmit\n  };\n};\n_s(PersonFormLogic, \"LtY9Sa1GhPm5PWJI5KRJiWVSbDQ=\");\n_c = PersonFormLogic;\nexport default PersonFormLogic;\nvar _c;\n$RefreshReg$(_c, \"PersonFormLogic\");","map":{"version":3,"names":["useState","PersonFormLogic","setMessage","_s","formData","setFormData","firstname","middlename","lastname","idNumber","department","bankAccount","handleChange","e","name","value","target","handleSubmit","preventDefault","response","fetch","PAYROLL_ENDPOINT","method","headers","body","JSON","stringify","ok","error","_c","$RefreshReg$"],"sources":["/media/morpheus1213/rll/projects/daerp-laravel/frontend/src/pages/person/PersonFormLogic.jsx"],"sourcesContent":["import { useState } from \"react\";\n\nconst PersonFormLogic = ({ setMessage }) => {\n  // State for storing form inputs\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    middlename: \"\",\n    lastname: \"\",\n    idNumber: \"\",\n    department: \"\",\n    bankAccount: \"\",\n  });\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  // Handle form submission and send data to the backend API\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch(PAYROLL_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        setMessage(\"Person added successfully!\");\n      } else {\n        setMessage(\"Failed to add Person. Please try again.\");\n      }\n    } catch (error) {\n      setMessage(\"Error: Failed to connect to the server.\");\n    }\n  };\n\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n  };\n};\n\nexport default PersonFormLogic;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC1C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC;IACvCM,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCX,WAAW,CAAC;MACV,GAAGD,QAAQ;MACX,CAACU,IAAI,GAAGC;IACV,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAChCA,CAAC,CAACK,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,gBAAgB,EAAE;QAC7CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACtB,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAIe,QAAQ,CAACQ,EAAE,EAAE;QACfzB,UAAU,CAAC,4BAA4B,CAAC;MAC1C,CAAC,MAAM;QACLA,UAAU,CAAC,yCAAyC,CAAC;MACvD;IACF,CAAC,CAAC,OAAO0B,KAAK,EAAE;MACd1B,UAAU,CAAC,yCAAyC,CAAC;IACvD;EACF,CAAC;EAED,OAAO;IACLE,QAAQ;IACRQ,YAAY;IACZK;EACF,CAAC;AACH,CAAC;AAACd,EAAA,CAhDIF,eAAe;AAAA4B,EAAA,GAAf5B,eAAe;AAkDrB,eAAeA,eAAe;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}